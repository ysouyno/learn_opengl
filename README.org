#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: learn_opengl
#+date: <2024-09-27 周五>
#+author: ysouyno
#+email:
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.4 (Org mode 9.6.15)
#+cite_export:

* <2024-09-29 周日> 前言

教程链接：“[[https://learnopengl-cn.github.io/][LearnOpenGL CN]]”。

* <2021-12-05 周日> 环境配置（ ~linux~ ）

** ~archlinux~ 环境配置

分别用到了 ~glfw~ ， ~stb~ ， ~glm~ 和 ~glad~ ，其中 ~glfw~ 和 ~stb~ 直接从 ~github~ 上克隆最新代码：

#+begin_src shellsession
$ git clone https://github.com/glfw/glfw.git
$ git clone https://github.com/nothings/stb.git
#+end_src

其中 ~glfw~ 需要编译一下才能使用，很简单：

#+begin_src shellsession
$ cd glfw
$ mkdir build
$ cd build
$ cmake ..
$ make
#+end_src

~glm~ 是按照教程中的建议，选择了低于 ~0.9.9~ 的版本，下载地址：“[[https://github.com/g-truc/glm/releases/tag/0.9.8.5][GLM 0.9.8.5]]”。

~glad~ 用的好像是教程中提供的在线服务链接生成的“[[https://glad.dav1d.de][Glad]]”，另项目中的 ~glad.c~ 是指向本机电脑中的一个软链接。

** 编译

编译及链接选项参考项目的 ~.vscode~ 中的文件。另因为使用 ~clang-format~ 格式化代码，头文件的顺序会影响编译，所以我在 ~~/.clang-format~ 中关闭了这项功能。

#+begin_src shellsession
$ cat ~/.clang-format
Language: Cpp
SortIncludes: false
#+end_src

* <2024-09-27 周五> 环境配置（ ~windows~ ）

** ~vs2010~

1. 创建 ~solution~ 文件 ~learn_opengl.sln~ 。
2. 创建 ~third_party~ 目录。
3. 下载预编译好的“[[https://github.com/glfw/glfw/releases/download/3.3.5/glfw-3.3.5.bin.WIN32.zip][glfw-3.3.5.bin.WIN32.zip]]”。

** ~assimp~

想在 ~vs2010~ 上自己编译 ~assimp~ 的，发现 ~cmake~ 自 ~3.25~ 版本已经移除了 ~vs2010~ ，所以我选择了 ~cmake-3.24.4~ 版本。其实不算什么，只是提醒一下以节省时间。

这个库很难编译，或者说非常麻烦。我在这里“[[https://sourceforge.net/projects/assimp/files/assimp-3.1/][assimp-3.1.1-win-binaries.zip]]”找到了一个预编译二进制包下载，但是好像不能运行。居然提示，一个 ~exe~ 的运行依赖另一个 ~exe~ ，开眼了。

#+ATTR_HTML: :width 60%
[[file:files/20240929_0.png]]

目前的进展是，直接双击 ~assimp.exe~ 会提示缺少 ~msvcr110.dll~ 和 ~msvcp110.dll~ ，这两个文件我在网上下载的出现各种问题，最后安装了 ~vcredist_x86.exe~ （即 ~Microsoft Visual C++ 2012 Redistributable (x86)~ ）解决的，虽然 ~assimp.exe~ 成功运行了，但是上面的错误提示框依然存在。所以我只能选择 ~vs2022~ 来编译。因为其实这个库在 ~vs2022~ 上编译非常方便，在 ~cmake-3.24.4~ 上不用任何配置就编译成功了。

#+ATTR_HTML: :width 60%
[[file:files/20240929_1.png]]

我用的是当前最新的版本 ~assimp-5.4.3~ ，运行效果如下：

#+ATTR_HTML: :width 60%
[[file:files/20240929_2.png]]

*** ~assimp-3.1.1~

尝试自己在 ~vs2010~ 上编译 [[https://sourceforge.net/projects/assimp/files/assimp-3.1/][assimp-3.1.1]] ，首先需要安装：

+ ~GoRuntime_DotNetFramework_3.x.exe~
+ ~DXSDK_Jun10.exe~ （ ~win10~ 系统上它依赖于 ~DotNetFramework_3.5~ ）
+ [[https://cmake.org/files/v2.8/cmake-2.8.6-win32-x86.exe][cmake-2.8.6-win32-x86.exe]]

#+ATTR_HTML: :width 60%
[[file:files/20240929_3.png]]

在安装 ~GoRuntime_DotNetFramework_3.x.exe~ 时发生 ~Error Code: S1023~

+ 尝试卸载 ~Microsoft Visual C++ 2010 x86 Redistributable - 1010.0.40219~ ，失败。
+ 尝试卸载 ~Microsoft Visual C++ 2012 Redistributable (x86)~ ，失败。
+ 尝试卸载 ~Microsoft Visual C++ 2010 x64 Redistributable - 1010.0.40219~ ，成功。

这样 ~cmake-2.8.6~ 也运行成功了，附上我的 ~csdn~ 资源：“[[https://download.csdn.net/download/ftuc5dn/89815337][assimp-3.1.1 预编译二进制文件（32位）]]”。

#+ATTR_HTML: :width 60%
[[file:files/20240929_4.png]]

~vs2010~ 成功：

#+ATTR_HTML: :width 60%
[[file:files/20240929_5.png]]

* <2021-12-06 周一> 入门.坐标系统

在“坐标系统”的“更多立方体”中提供的代码，文章中提到这十个立方体都能自主旋转，其实不然。我稍微修改了他的代码实现了，见：“[[https://github.com/ysouyno/learn_opengl/commit/b49247b5f9e1dd5e5b92809fe2235b948185767a][more cubes]]”，主要是这两处修改：

#+begin_src c++
  float angle = 20.0f * (i + 1);
  model = glm::rotate(model, (float)glfwGetTime() * glm::radians(angle),
                      glm::vec3(1.0f, 0.3f, 0.5f));
#+end_src

原代码中 ~angle = 20.0f * i~ 会导致最中间的那个立方体不旋转。

* <2024-09-27 周五> 光照.基础光照

背后的数学知道可能需要回顾，代码中的注释说明了一切：

#+begin_src glsl
  #version 330 core
  out vec4 FragColor;

  in vec3 Normal;
  in vec3 FragPos;

  uniform vec3 objectColor;
  uniform vec3 lightColor;
  uniform vec3 lightPos;

  void main()
  {
    // amibent
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    // diffuse
    // 因为只关心方向向量的方向，所以这里先进行标准化，即 normalize
    // norm 是书中所说的法向量，垂直于立面体表面
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);

    // 将法向量和方向向量进行点乘，会得到它们之前夹角的余弦值
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    vec3 result = (ambient + diffuse) * objectColor;
    FragColor = vec4(result, 1.0);
  }
#+end_src

* <2024-09-27 周五> 光照.材质.设置材质

我按照教程一步一步来操作，但没有得到相同的效果：

#+ATTR_HTML: :width 50%
[[file:files/20240927_0.png]]

#+ATTR_HTML: :width 50%
[[file:files/20240927_1.png]]

原来在设置 ~material.shininess~ 时变量名拼写错误了，看评论说 ~shininess~ 设置为 ~0~ 时会出现黑色。

* <2024-09-28 周六> 光照.光照贴图.练习

练习的最后一题没有提供答案，我的答案是（上图是参考答案，下图是我的答案）：

#+ATTR_HTML: :width 50%
[[file:files/20240928_0.png]]

#+ATTR_HTML: :width 50%
[[file:files/20240928_1.png]]

我是这么修改代码的：

#+ATTR_HTML: :width 80%
[[file:files/20240928_2.png]]

* <2024-09-28 周六> 光照.投光物.平行光

当前 ~commit~ 下可以看到 ~平行光~ 的效果，但是只能显示一个立方体，且不能旋转，与书中提供的贴图效果不一样，且书中提供的代码也与贴图不一致。

看了半天也不知道问题出在哪里，那么在此代码基础上如何显示出十个立方体呢？

这个问题解决了，原来是 ~2.5.light_cube.vs~ 的问题，代码中一直在用 ~aPos~ ，它是直接来自输入参数，并没有 ~model~ 的计算处理，所以只能显示一个立方体，所以现在用 ~FragPos~ 就解决了。

* <2024-09-28 周六> 光照.复习.词汇表

这一部分的内容真的好多，需要时不时的温故一下，否则学习的时间又浪费了！两天的时间居然学习了这么多新知识：

+ 颜色向量（ ~Color Vector~ ）：一个通过红绿蓝（ ~RGB~ ）分量的组合描绘大部分真实颜色的向量。一个物体的颜色实际上是该物体所不能吸收的反射颜色分量。
+ 风氏光照模型（ ~Phong Lighting Model~ ）：一个通过计算环境光，漫反射，和镜面光分量的值来近似真实光照的模型。
+ 环境光照（ ~Ambient Lighting~ ）：通过给每个没有被光照的物体很小的亮度，使其不是完全黑暗的，从而对全局光照进行近似。
+ 漫反射着色（ ~Diffuse Shading~ ）：一个顶点/片段与光线方向越接近，光照会越强。使用了法向量来计算角度。
+ 法向量（ ~Normal Vector~ ）：一个垂直于平面的单位向量。
+ 法线矩阵（ ~Normal Matrix~ ）：一个 ~3x3~ 矩阵，或者说是没有平移的模型（或者模型-观察）矩阵。它也被以某种方式修改（逆转置），从而在应用非统一缩放时，保持法向量朝向正确的方向。否则法向量会在使用非统一缩放时被扭曲。
+ 镜面光照（ ~Specular Lighting~ ）：当观察者视线靠近光源在表面的反射线时会显示的镜面高光。镜面光照是由观察者的方向，光源的方向和设定高光分散量的反光度值三个量共同决定的。
+ 风氏着色（ ~Phong Shading~ ）：风氏光照模型应用在片段着色器。
+ ~Gouraud~ 着色（ ~Gouraud shading~ ）：风氏光照模型应用在顶点着色器上。在使用很少数量的顶点时会产生明显的瑕疵。会得到效率提升但是损失了视觉质量。
+ ~GLSL~ 结构体（ ~GLSL struct~ ）：一个类似于 ~C~ 的结构体，用作着色器变量的容器。大部分时间用来管理输入/输出/ ~uniform~ 。
+ 材质（ ~Material~ ）：一个物体反射的环境光，漫反射，镜面光颜色。这些东西设定了物体所拥有的颜色。
+ 光照属性（ ~Light~ （ ~properties~ ））：一个光的环境光，漫反射，镜面光的强度。可以使用任何颜色值，对每一个风氏分量（ ~Phong Component~ ）定义光源发出的颜色/强度。
+ 漫反射贴图（ ~Diffuse Map~ ）：一个设定了每个片段中漫反射颜色的纹理图片。
+ 镜面光贴图（ ~Specular Map~ ）：一个设定了每一个片段的镜面光强度/颜色的纹理贴图。仅在物体的特定区域显示镜面高光。
+ 定向光（ ~Directional Light~ ）：只有方向的光源。它被建模为无限距离，这使得它的所有光线看起来都是平行的，因此它的方向矢量在整个场景中保持不变。
+ 点光源（ ~Point Light~ ）：一个在场景中有位置的，光线逐渐衰减的光源。
+ 衰减（ ~Attenuation~ ）：光随着距离减少强度减小的过程，通常使用在点光源和聚光下。
+ 聚光（ ~Spotlight~ ）：一个被定义为在某一个方向上的锥形的光源。
+ 手电筒（ ~Flashlight~ ）：一个摆放在观察者视角的聚光。
+ ~GLSL Uniform~ 数组（ ~GLSL Uniform Array~ ）：一个 ~uniform~ 值数组。它的工作原理和 ~C~ 语言数组大致一样，只是不能动态分配内存。

* <2024-10-01 周二> 高级 ~OpenGL~ .模板测试.物体轮廓（一）

注意到这个变量非常重要 ~GL_STENCIL_BUFFER_BIT~ ，如果不设置它，效果非常的差，你可以试着取消它看看效果。

说实话，我真的没有看懂这一节的内容！

* <2024-10-01 周二> 高级 ~OpenGL~ .模板测试.物体轮廓（二）

关于物体轮廓的 ~stencil~ 代码流程理解：

#+begin_src c++
  // configure global opengl state
  // -----------------------------
  glEnable(GL_DEPTH_TEST);
  glDepthFunc(GL_LESS);
  glEnable(GL_STENCIL_TEST);
  glStencilFunc(GL_NOTEQUAL, 1, 0xFF);
  glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);
#+end_src

在全局设置中，先启用 ~stencil~ 测试，并设置不为 ~1~ 时通过测试（这里似乎没什么用），这里有两个函数通俗点讲：

+ ~glStencilFunc~ 设置对缓冲区做什么，比如等于 ~1~ 时通过测试。
+ ~glStencilOp~ 设置如何更新缓冲区，比如上述代码，第一个参数表示深度测试通过但 ~stencil~ 测试失败时保留缓冲区，第二个参数表示 ~stencil~ 测试通过但深度测试失败时保留缓冲区，第三个参数表示两个测试都通过时将模板值设置为 ~glStencilFunc~ 函数设置的 ~ref~ 值。

#+begin_src c++
  // draw floor as normal, but don't write the floor to the stencil buffer,
  // we only care about the containers. We set its mask to 0x00 to not write to the stencil buffer.
  glStencilMask(0x00);
#+end_src

先绘制地板，因为地板不进模板测试缓冲区，所以设置 ~mask~ 为 ~0x00~ ，此时的模板测试缓冲区为空。

#+begin_src c++
  // 1st. render pass, draw objects as normal, writing to the stencil buffer
  // --------------------------------------------------------------------
  glStencilFunc(GL_ALWAYS, 1, 0xFF);
  glStencilMask(0xFF);
#+end_src

绘制完地板后要写入模板测试缓冲区了，所以此时将 ~mask~ 设置为 ~0xFF~ ，表示启用模板缓冲区写入。通过使用 ~GL_ALWAYS~ 模板测试函数，我们保证了箱子的每个片段都会将模板缓冲的模板值更新为 ~1~ 。

+ ~glStencilFunc(GL_ALWAYS, 1, 0xFF);~ 表示总是将模板值与参考值 ~1~ 进行比较？（对这个函数好抽象）

紧接着绘制立方体，这样立方体的数据就写入到了模板测试缓冲区里了。此时缓冲区里只有两个立方体的数据（没有地板哦），然后设置：

#+begin_src c++
  // 2nd. render pass: now draw slightly scaled versions of the objects, this time disabling stencil writing.
  // Because the stencil buffer is now filled with several 1s. The parts of the buffer that are 1 are not drawn, thus only drawing
  // the objects' size differences, making it look like borders.
  // -----------------------------------------------------------------------------------------------------------------------------
  glStencilFunc(GL_NOTEQUAL, 1, 0xFF);
  glStencilMask(0x00);
  glDisable(GL_DEPTH_TEST);
  shaderSingleColor.use();
  float scale = 1.1f;
#+end_src

这里设置不为 ~1~ 时通过模板测试，所以已经绘制的两个立方体之外的区域才可以通过模板测试，并禁止了模板缓冲区的写入。同时禁用了深度测试，它的目的是为了在绘制时边框不会被地板覆盖。

这里的伪代码表达了整个流程，非常直观：

#+begin_src c++
  glEnable(GL_DEPTH_TEST);
  glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);

  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

  glStencilMask(0x00); // 记得保证我们在绘制地板的时候不会更新模板缓冲
  normalShader.use();
  DrawFloor()

  glStencilFunc(GL_ALWAYS, 1, 0xFF);
  glStencilMask(0xFF);
  DrawTwoContainers();

  glStencilFunc(GL_NOTEQUAL, 1, 0xFF);
  glStencilMask(0x00);
  glDisable(GL_DEPTH_TEST);
  shaderSingleColor.use();
  DrawTwoScaledUpContainers();
  glStencilMask(0xFF);
  glEnable(GL_DEPTH_TEST);
#+end_src

* <2024-10-09 周三> 高级 ~OpenGL~ .几何着色器

#+begin_src glsl
  void build_house(vec4 position) {
    fColor = gs_in[0].color;
    gl_Position = position + vec4(-0.2, -0.2, 0.0, 0.0);
    EmitVertex();
    gl_Position = position + vec4( 0.2, -0.2, 0.0, 0.0);
    EmitVertex();
    gl_Position = position + vec4(-0.2,  0.2, 0.0, 0.0);
    EmitVertex();
    gl_Position = position + vec4( 0.2,  0.2, 0.0, 0.0);
    EmitVertex();
    gl_Position = position + vec4( 0.0,  0.4, 0.0, 0.0);
    fColor = vec3(1.0, 1.0, 1.0); // 屋顶上的落雪效果
    EmitVertex();
    EndPrimitive();
  }
#+end_src

为啥这里加上 ~fColor = vec3(1.0, 1.0, 1.0);~ 的效果是屋顶颜色渐变，以我的理解，不应该将之前 ~fColor = gs_in[0].color;~ 设置的值覆盖掉了嘛，会导致所以四个房子都变成白色的。

我以为在代码中只加载了 ~Model nanosuit("nanosuit/nanosuit.obj");~ 一个文件，那实际上也就只需要一个 ~nanosuit.obj~ 文件即可呢，但其实如果只用这一个文件的话，显示出来的将是全黑色的角色。所以我把缺失的文件都添加上了。

* <2024-10-10 周四> 高级 ~OpenGL~ .实例化.实例化数组

这行 ~glVertexAttribDivisor(2, 1);~ 代码是点睛之笔！如果没有它整个输出是错乱的。我也试着将第二个参数改为 ~2~ ，这样只显示了下半部分；改成 ~5~ 只显示底部的五分之一。

这是实例化数组，上一个 ~commit~ ，使用的是 ~uniform~ 来传递，它在 ~opengl~ 中有数量上限的限制，所以这里采用实例化数组就没有这个限制了，限制它的只有内存了。

绘制顺序将从左下角向右再向上绘制。
